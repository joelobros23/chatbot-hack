document.addEventListener('DOMContentLoaded', () => {
  const chatBox = document.getElementById('chatBox');
  const chatForm = document.getElementById('chatForm');
  const userInput = document.getElementById('userInput');

const DATA_PH = 'samsung.firmware.ms.php';

  const LOCAL_STORAGE_KEY = 'anonymox_chat_history';

const chatHistory = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [];

(async () => {
  await botStartupMessage();

  chatHistory.forEach(({ sender, message }) => {
    if (!(sender === 'Anonymox' && message === initialMessage)) {
      appendMessage(sender, message, sender === 'Anonymox');
    }
  });
})();

  function botStartupMessage() {
  return new Promise((resolve) => {
    showTypingIndicator();
    setTimeout(() => {
      hideTypingIndicator();
      const initialMessage = "Greetings, I'm Anonymox — the shadow behind the darkest corners of the web. I will teach you the art of hacking, not for money... but for nothing. Consider it a gift — or a curse. So what do you want to learn?";
      appendMessage('Anonymox', initialMessage, true);

      const exists = chatHistory.some(
        (entry) => entry.sender === 'Anonymox' && entry.message === initialMessage
      );
      if (!exists) {
        chatHistory.push({ sender: 'Anonymox', message: initialMessage });
        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(chatHistory));
      }

      resolve();
    }, 2000);
  });
}


function appendMessage(sender, message, isBot = false) {
  const div = document.createElement('div');
  div.classList.add('my-2');

if (isBot) {

  message = message.replace(/</g, '&lt;').replace(/>/g, '&gt;');

  message = message
    .replace(/```(\w+)?\n([\s\S]*?)```/g, (_, lang, code) => {
      return `<pre><code class="language-${lang || ''}">${code.trim()}</code></pre>`;
    })
    .replace(/`([^`\n]+)`/g, '<code>$1</code>')
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    .replace(/(?:^|\n)[\*\-]\s(.*)/g, '\n<ul><li>$1</li></ul>')
    .replace(/(?:^|\n)\d+\.\s(.*)/g, '\n<ol><li>$1</li></ol>')
    .replace(/<\/ul>\s*<ul>/g, '')
    .replace(/<\/ol>\s*<ol>/g, '')
    .replace(/\n(?![^<]*<\/(?:pre|ul|ol|code)>)/g, '<br>');

  div.innerHTML = `
    <div class="d-flex align-items-start">
      
      <div class="p-2 rounded" style="background-color:rgb(66, 66, 66); color:white; max-width: 100%; margin-bottom: 20px">
      <img src="AdobeStock_546989350_Preview.jpeg" alt="Anonymox" class="rounded-circle" width="40" height="40">
        <strong style="color:#03fc6f;">Anonymox</strong><br>${message}
      </div>
    </div>
  `;
}
 else {
    div.innerHTML = `<div class="text-white p-2 rounded" style="background-color:rgb(0, 163, 87); color: white; margin-bottom:20px;"><strong>You:</strong> ${message}</div>`;
  }
if (isBot) Prism.highlightAllUnder(div);

  chatBox.appendChild(div);
  chatBox.scrollTop = chatBox.scrollHeight;
}

function showTypingIndicator() {
  const div = document.createElement('div');
  div.id = 'typingIndicator';
  div.classList.add('my-2');

  div.innerHTML = `
    <div class="p-2 rounded typing-indicator" style="background-color: #272727; color: white">
      <strong>Anonymox is typing</strong>
      <span></span><span></span><span></span>
    </div>
  `;
  chatBox.appendChild(div);
  chatBox.scrollTop = chatBox.scrollHeight;
}

function hideTypingIndicator() {
  const indicator = document.getElementById('typingIndicator');
  if (indicator) {
    indicator.remove();
  }
}


  chatForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const message = userInput.value.trim();
    if (!message) return;

appendMessage('You', message);
userInput.value = '';
showTypingIndicator();

    chatHistory.push({ sender: 'You', message });
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(chatHistory));

    try {

      const devicelist = await fetch('device.json');
      const device_list = await devicelist.json();

      for (const entry of chatHistory) {
        device_list.contents.push({
          role: entry.sender === 'You' ? 'user' : 'model',
          parts: [{ text: entry.message }]
        });
      }

      const res = await fetch(DATA_PH, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(device_list)
      });

      const data = await res.json();
      const reply = data?.candidates?.[0]?.content?.parts?.[0]?.text || '⚠️ No response';

hideTypingIndicator();
appendMessage('Anonymox', reply, true);

      chatHistory.push({ sender: 'Anonymox', message: reply });
      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(chatHistory));

    } catch (err) {
      console.error(err);
      hideTypingIndicator();
      const errorMessage = '⚠️ Error connecting to Anonymox.';
      appendMessage('Anonymox', errorMessage, true);
      chatHistory.push({ sender: 'Anonymox', message: errorMessage });
      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(chatHistory));
    }
  });

  // Disable Right Click
document.addEventListener('contextmenu', (e) => {
  e.preventDefault();
});

// Disable F12, Ctrl+Shift+I, Ctrl+Shift+C, Ctrl+Shift+J, Ctrl+U
document.addEventListener('keydown', (e) => {
  if (
    e.key === 'F12' ||
    (e.ctrlKey && e.shiftKey && ['I', 'C', 'J'].includes(e.key)) ||
    (e.ctrlKey && e.key === 'u')
  ) {
    e.preventDefault();
  }
});

// Attempt to detect Developer Tools (basic detection via dimensions)
setInterval(function () {
  if (
    window.outerWidth - window.innerWidth > 160 ||
    window.outerHeight - window.innerHeight > 160
  ) {
    document.body.innerHTML = "<h1 style='color:red; text-align:center;'>Access Denied</h1>";
  }
}, 1000);

});
